{"ast":null,"code":"import { C } from \"./stegaClean.js\";\nconst reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/;\nfunction isKeySegment(segment) {\n  return typeof segment == \"string\" ? reKeySegment.test(segment.trim()) : typeof segment == \"object\" && \"_key\" in segment;\n}\nfunction toString(path) {\n  if (!Array.isArray(path)) throw new Error(\"Path is not an array\");\n  return path.reduce((target, segment, i) => {\n    const segmentType = typeof segment;\n    if (segmentType === \"number\") return `${target}[${segment}]`;\n    if (segmentType === \"string\") return `${target}${i === 0 ? \"\" : \".\"}${segment}`;\n    if (isKeySegment(segment) && segment._key) return `${target}[_key==\"${segment._key}\"]`;\n    if (Array.isArray(segment)) {\n      const [from, to] = segment;\n      return `${target}[${from}:${to}]`;\n    }\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``);\n  }, \"\");\n}\nconst ESCAPE = {\n    \"\\f\": \"\\\\f\",\n    \"\\n\": \"\\\\n\",\n    \"\\r\": \"\\\\r\",\n    \"\t\": \"\\\\t\",\n    \"'\": \"\\\\'\",\n    \"\\\\\": \"\\\\\\\\\"\n  },\n  UNESCAPE = {\n    \"\\\\f\": \"\\f\",\n    \"\\\\n\": `\n`,\n    \"\\\\r\": \"\\r\",\n    \"\\\\t\": \"\t\",\n    \"\\\\'\": \"'\",\n    \"\\\\\\\\\": \"\\\\\"\n  };\nfunction jsonPath(path) {\n  return `$${path.map(segment => typeof segment == \"string\" ? `['${segment.replace(/[\\f\\n\\r\\t'\\\\]/g, match => ESCAPE[match])}']` : typeof segment == \"number\" ? `[${segment}]` : segment._key !== \"\" ? `[?(@._key=='${segment._key.replace(/['\\\\]/g, match => ESCAPE[match])}')]` : `[${segment._index}]`).join(\"\")}`;\n}\nfunction parseJsonPath(path) {\n  const parsed = [],\n    parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g;\n  let match;\n  for (; (match = parseRe.exec(path)) !== null;) {\n    if (match[1] !== void 0) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, m => UNESCAPE[m]);\n      parsed.push(key);\n      continue;\n    }\n    if (match[2] !== void 0) {\n      parsed.push(parseInt(match[2], 10));\n      continue;\n    }\n    if (match[3] !== void 0) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, m => UNESCAPE[m]);\n      parsed.push({\n        _key,\n        _index: -1\n      });\n      continue;\n    }\n  }\n  return parsed;\n}\nfunction jsonPathToStudioPath(path) {\n  return path.map(segment => {\n    if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n    if (segment._key !== \"\") return {\n      _key: segment._key\n    };\n    if (segment._index !== -1) return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction jsonPathToMappingPath(path) {\n  return path.map(segment => {\n    if (typeof segment == \"string\" || typeof segment == \"number\") return segment;\n    if (segment._index !== -1) return segment._index;\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`);\n  });\n}\nfunction resolveMapping(resultPath, csm) {\n  if (!(csm != null && csm.mappings)) return;\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath));\n  if (csm.mappings[resultMappingPath] !== void 0) return {\n    mapping: csm.mappings[resultMappingPath],\n    matchedPath: resultMappingPath,\n    pathSuffix: \"\"\n  };\n  const mappings = Object.entries(csm.mappings).filter(([key]) => resultMappingPath.startsWith(key)).sort(([key1], [key2]) => key2.length - key1.length);\n  if (mappings.length == 0) return;\n  const [matchedPath, mapping] = mappings[0],\n    pathSuffix = resultMappingPath.substring(matchedPath.length);\n  return {\n    mapping,\n    matchedPath,\n    pathSuffix\n  };\n}\nfunction isArray(value) {\n  return value !== null && Array.isArray(value);\n}\nfunction isRecord(value) {\n  return typeof value == \"object\" && value !== null;\n}\nfunction walkMap(value, mappingFn, path = []) {\n  return isArray(value) ? value.map((v, idx) => {\n    if (isRecord(v)) {\n      const _key = v._key;\n      if (typeof _key == \"string\") return walkMap(v, mappingFn, path.concat({\n        _key,\n        _index: idx\n      }));\n    }\n    return walkMap(v, mappingFn, path.concat(idx));\n  }) : isRecord(value) ? Object.fromEntries(Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))])) : mappingFn(value, path);\n}\nfunction encodeIntoResult(result, csm, encoder) {\n  return walkMap(result, (value, path) => {\n    if (typeof value != \"string\") return value;\n    const resolveMappingResult = resolveMapping(path, csm);\n    if (!resolveMappingResult) return value;\n    const {\n      mapping,\n      matchedPath\n    } = resolveMappingResult;\n    if (mapping.type !== \"value\" || mapping.source.type !== \"documentValue\") return value;\n    const sourceDocument = csm.documents[mapping.source.document],\n      sourcePath = csm.paths[mapping.source.path],\n      matchPathSegments = parseJsonPath(matchedPath),\n      fullSourceSegments = parseJsonPath(sourcePath).concat(path.slice(matchPathSegments.length));\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value\n    });\n  });\n}\nconst DRAFTS_PREFIX = \"drafts.\";\nfunction getPublishedId(id) {\n  return id.startsWith(DRAFTS_PREFIX) ? id.slice(DRAFTS_PREFIX.length) : id;\n}\nfunction createEditUrl(options) {\n  const {\n    baseUrl,\n    workspace: _workspace = \"default\",\n    tool: _tool = \"default\",\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset\n  } = options;\n  if (!baseUrl) throw new Error(\"baseUrl is required\");\n  if (!path) throw new Error(\"path is required\");\n  if (!_id) throw new Error(\"id is required\");\n  if (baseUrl !== \"/\" && baseUrl.endsWith(\"/\")) throw new Error(\"baseUrl must not end with a slash\");\n  const workspace = _workspace === \"default\" ? void 0 : _workspace,\n    tool = _tool === \"default\" ? void 0 : _tool,\n    id = getPublishedId(_id),\n    stringifiedPath = Array.isArray(path) ? toString(jsonPathToStudioPath(path)) : path,\n    searchParams = new URLSearchParams({\n      baseUrl,\n      id,\n      type,\n      path: stringifiedPath\n    });\n  workspace && searchParams.set(\"workspace\", workspace), tool && searchParams.set(\"tool\", tool), projectId && searchParams.set(\"projectId\", projectId), dataset && searchParams.set(\"dataset\", dataset), _id.startsWith(DRAFTS_PREFIX) && searchParams.set(\"isDraft\", \"\");\n  const segments = [baseUrl === \"/\" ? \"\" : baseUrl];\n  workspace && segments.push(workspace);\n  const routerParams = [\"mode=presentation\", `id=${id}`, `type=${type}`, `path=${encodeURIComponent(stringifiedPath)}`];\n  return tool && routerParams.push(`tool=${tool}`), segments.push(\"intent\", \"edit\", `${routerParams.join(\";\")}?${searchParams}`), segments.join(\"/\");\n}\nfunction resolveStudioBaseRoute(studioUrl) {\n  let baseUrl = typeof studioUrl == \"string\" ? studioUrl : studioUrl.baseUrl;\n  return baseUrl !== \"/\" && (baseUrl = baseUrl.replace(/\\/$/, \"\")), typeof studioUrl == \"string\" ? {\n    baseUrl\n  } : {\n    ...studioUrl,\n    baseUrl\n  };\n}\nconst filterDefault = ({\n    sourcePath,\n    resultPath,\n    value\n  }) => {\n    if (isValidDate(value) || isValidURL(value)) return !1;\n    const endPath = sourcePath.at(-1);\n    return !(sourcePath.at(-2) === \"slug\" && endPath === \"current\" || typeof endPath == \"string\" && endPath.startsWith(\"_\") || typeof endPath == \"number\" && sourcePath.at(-2) === \"marks\" || endPath === \"href\" && typeof sourcePath.at(-2) == \"number\" && sourcePath.at(-3) === \"markDefs\" || endPath === \"style\" || endPath === \"listItem\" || sourcePath.some(path => path === \"meta\" || path === \"metadata\" || path === \"openGraph\" || path === \"seo\") || hasTypeLike(sourcePath) || hasTypeLike(resultPath) || typeof endPath == \"string\" && denylist.has(endPath));\n  },\n  denylist = /* @__PURE__ */new Set([\"color\", \"colour\", \"currency\", \"email\", \"format\", \"gid\", \"hex\", \"href\", \"hsl\", \"hsla\", \"icon\", \"id\", \"index\", \"key\", \"language\", \"layout\", \"link\", \"linkAction\", \"locale\", \"lqip\", \"page\", \"path\", \"ref\", \"rgb\", \"rgba\", \"route\", \"secret\", \"slug\", \"status\", \"tag\", \"template\", \"theme\", \"type\", \"unit\", \"url\", \"username\", \"variant\", \"website\"]);\nfunction isValidDate(dateString) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? !!Date.parse(dateString) : !1;\n}\nfunction isValidURL(url) {\n  try {\n    new URL(url, url.startsWith(\"/\") ? \"https://acme.com\" : void 0);\n  } catch {\n    return !1;\n  }\n  return !0;\n}\nfunction hasTypeLike(path) {\n  return path.some(segment => typeof segment == \"string\" && segment.match(/type/i) !== null);\n}\nconst TRUNCATE_LENGTH = 20;\nfunction stegaEncodeSourceMap(result, resultSourceMap, config) {\n  var _a, _b, _c, _d, _e, _f, _g, _h, _i;\n  const {\n    filter,\n    logger,\n    enabled\n  } = config;\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\";\n    throw (_a = logger == null ? void 0 : logger.error) == null || _a.call(logger, `[@sanity/client]: ${msg}`, {\n      result,\n      resultSourceMap,\n      config\n    }), new TypeError(msg);\n  }\n  if (!resultSourceMap) return (_b = logger == null ? void 0 : logger.error) == null || _b.call(logger, \"[@sanity/client]: Missing Content Source Map from response body\", {\n    result,\n    resultSourceMap,\n    config\n  }), result;\n  if (!config.studioUrl) {\n    const msg = \"config.studioUrl must be defined\";\n    throw (_c = logger == null ? void 0 : logger.error) == null || _c.call(logger, `[@sanity/client]: ${msg}`, {\n      result,\n      resultSourceMap,\n      config\n    }), new TypeError(msg);\n  }\n  const report = {\n      encoded: [],\n      skipped: []\n    },\n    resultWithStega = encodeIntoResult(result, resultSourceMap, ({\n      sourcePath,\n      sourceDocument,\n      resultPath,\n      value\n    }) => {\n      if ((typeof filter == \"function\" ? filter({\n        sourcePath,\n        resultPath,\n        filterDefault,\n        sourceDocument,\n        value\n      }) : filterDefault({\n        sourcePath,\n        resultPath,\n        filterDefault,\n        sourceDocument,\n        value\n      })) === !1) return logger && report.skipped.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      }), value;\n      logger && report.encoded.push({\n        path: prettyPathForLogging(sourcePath),\n        value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? \"...\" : \"\"}`,\n        length: value.length\n      });\n      const {\n        baseUrl,\n        workspace,\n        tool\n      } = resolveStudioBaseRoute(typeof config.studioUrl == \"function\" ? config.studioUrl(sourceDocument) : config.studioUrl);\n      if (!baseUrl) return value;\n      const {\n        _id: id,\n        _type: type,\n        _projectId: projectId,\n        _dataset: dataset\n      } = sourceDocument;\n      return C(value, {\n        origin: \"sanity.io\",\n        href: createEditUrl({\n          baseUrl,\n          workspace,\n          tool,\n          id,\n          type,\n          path: sourcePath,\n          ...(!config.omitCrossDatasetReferenceData && {\n            dataset,\n            projectId\n          })\n        })\n      },\n      // We use custom logic to determine if we should skip encoding\n      !1);\n    });\n  if (logger) {\n    const isSkipping = report.skipped.length,\n      isEncoding = report.encoded.length;\n    if ((isSkipping || isEncoding) && ((_d = (logger == null ? void 0 : logger.groupCollapsed) || logger.log) == null || _d(\"[@sanity/client]: Encoding source map into result\"), (_e = logger.log) == null || _e.call(logger, `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`)), report.encoded.length > 0 && ((_f = logger == null ? void 0 : logger.log) == null || _f.call(logger, \"[@sanity/client]: Table of encoded paths\"), (_g = (logger == null ? void 0 : logger.table) || logger.log) == null || _g(report.encoded)), report.skipped.length > 0) {\n      const skipped = /* @__PURE__ */new Set();\n      for (const {\n        path\n      } of report.skipped) skipped.add(path.replace(reKeySegment, \"0\").replace(/\\[\\d+\\]/g, \"[]\"));\n      (_h = logger == null ? void 0 : logger.log) == null || _h.call(logger, \"[@sanity/client]: List of skipped paths\", [...skipped.values()]);\n    }\n    (isSkipping || isEncoding) && ((_i = logger == null ? void 0 : logger.groupEnd) == null || _i.call(logger));\n  }\n  return resultWithStega;\n}\nfunction prettyPathForLogging(path) {\n  return toString(jsonPathToStudioPath(path));\n}\nvar stegaEncodeSourceMap$1 = /* @__PURE__ */Object.freeze({\n  __proto__: null,\n  stegaEncodeSourceMap\n});\nexport { stegaEncodeSourceMap$1 as a, encodeIntoResult as e, stegaEncodeSourceMap as s };","map":{"version":3,"names":["reKeySegment","isKeySegment","segment","test","trim","toString","path","Array","isArray","Error","reduce","target","i","segmentType","_key","from","to","JSON","stringify","ESCAPE","UNESCAPE","jsonPath","map","replace","match","_index","join","parseJsonPath","parsed","parseRe","exec","key","m","push","parseInt","jsonPathToStudioPath","jsonPathToMappingPath","resolveMapping","resultPath","csm","mappings","resultMappingPath","mapping","matchedPath","pathSuffix","Object","entries","filter","startsWith","sort","key1","key2","length","substring","value","isRecord","walkMap","mappingFn","v","idx","concat","fromEntries","k","encodeIntoResult","result","encoder","resolveMappingResult","type","source","sourceDocument","documents","document","sourcePath","paths","matchPathSegments","fullSourceSegments","slice","DRAFTS_PREFIX","getPublishedId","id","createEditUrl","options","baseUrl","workspace","_workspace","tool","_tool","_id","projectId","dataset","endsWith","stringifiedPath","searchParams","URLSearchParams","set","segments","routerParams","encodeURIComponent","resolveStudioBaseRoute","studioUrl","filterDefault","isValidDate","isValidURL","endPath","at","some","hasTypeLike","denylist","has","Set","dateString","Date","parse","url","URL","TRUNCATE_LENGTH","stegaEncodeSourceMap","resultSourceMap","config","_a","_b","_c","_d","_e","_f","_g","_h","_i","logger","enabled","msg","error","call","TypeError","report","encoded","skipped","resultWithStega","prettyPathForLogging","_type","_projectId","_dataset","C","origin","href","omitCrossDatasetReferenceData","isSkipping","isEncoding","groupCollapsed","log","table","add","values","groupEnd"],"sources":["C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\studioPath.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\jsonPath.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\resolveMapping.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\isArray.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\isRecord.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\walkMap.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\stega\\encodeIntoResult.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\getPublishedId.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\createEditUrl.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\csm\\resolveEditInfo.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\stega\\filterDefault.ts","C:\\Users\\yabuti\\yabuti\\frontend\\node_modules\\@sanity\\client\\src\\stega\\stegaEncodeSourceMap.ts"],"sourcesContent":["/** @alpha */\nexport type KeyedSegment = {_key: string}\n\n/** @alpha */\nexport type IndexTuple = [number | '', number | '']\n\n/** @alpha */\nexport type PathSegment = string | number | KeyedSegment | IndexTuple\n\n/** @alpha */\nexport type Path = PathSegment[]\n\nconst rePropName =\n  /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g\n/** @internal */\nexport const reKeySegment = /_key\\s*==\\s*['\"](.*)['\"]/\nconst reIndexTuple = /^\\d*:\\d*$/\n\n/** @internal */\nexport function isIndexSegment(segment: PathSegment): segment is number {\n  return typeof segment === 'number' || (typeof segment === 'string' && /^\\[\\d+\\]$/.test(segment))\n}\n\n/** @internal */\nexport function isKeySegment(segment: PathSegment): segment is KeyedSegment {\n  if (typeof segment === 'string') {\n    return reKeySegment.test(segment.trim())\n  }\n\n  return typeof segment === 'object' && '_key' in segment\n}\n\n/** @internal */\nexport function isIndexTuple(segment: PathSegment): segment is IndexTuple {\n  if (typeof segment === 'string' && reIndexTuple.test(segment)) {\n    return true\n  }\n\n  if (!Array.isArray(segment) || segment.length !== 2) {\n    return false\n  }\n\n  const [from, to] = segment\n  return (typeof from === 'number' || from === '') && (typeof to === 'number' || to === '')\n}\n\n/** @internal */\nexport function get<Result = unknown, Fallback = unknown>(\n  obj: unknown,\n  path: Path | string,\n  defaultVal?: Fallback,\n): Result | typeof defaultVal {\n  const select = typeof path === 'string' ? fromString(path) : path\n  if (!Array.isArray(select)) {\n    throw new Error('Path must be an array or a string')\n  }\n\n  let acc: unknown | undefined = obj\n  for (let i = 0; i < select.length; i++) {\n    const segment = select[i]\n    if (isIndexSegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc[segment]\n    }\n\n    if (isKeySegment(segment)) {\n      if (!Array.isArray(acc)) {\n        return defaultVal\n      }\n\n      acc = acc.find((item) => item._key === segment._key)\n    }\n\n    if (typeof segment === 'string') {\n      acc =\n        typeof acc === 'object' && acc !== null\n          ? ((acc as Record<string, unknown>)[segment] as Result)\n          : undefined\n    }\n\n    if (typeof acc === 'undefined') {\n      return defaultVal\n    }\n  }\n\n  return acc as Result\n}\n\n/** @alpha */\nexport function toString(path: Path): string {\n  if (!Array.isArray(path)) {\n    throw new Error('Path is not an array')\n  }\n\n  return path.reduce<string>((target, segment, i) => {\n    const segmentType = typeof segment\n    if (segmentType === 'number') {\n      return `${target}[${segment}]`\n    }\n\n    if (segmentType === 'string') {\n      const separator = i === 0 ? '' : '.'\n      return `${target}${separator}${segment}`\n    }\n\n    if (isKeySegment(segment) && segment._key) {\n      return `${target}[_key==\"${segment._key}\"]`\n    }\n\n    if (Array.isArray(segment)) {\n      const [from, to] = segment\n      return `${target}[${from}:${to}]`\n    }\n\n    throw new Error(`Unsupported path segment \\`${JSON.stringify(segment)}\\``)\n  }, '')\n}\n\n/** @alpha */\nexport function fromString(path: string): Path {\n  if (typeof path !== 'string') {\n    throw new Error('Path is not a string')\n  }\n\n  const segments = path.match(rePropName)\n  if (!segments) {\n    throw new Error('Invalid path string')\n  }\n\n  return segments.map(parsePathSegment)\n}\n\nfunction parsePathSegment(segment: string): PathSegment {\n  if (isIndexSegment(segment)) {\n    return parseIndexSegment(segment)\n  }\n\n  if (isKeySegment(segment)) {\n    return parseKeySegment(segment)\n  }\n\n  if (isIndexTuple(segment)) {\n    return parseIndexTupleSegment(segment)\n  }\n\n  return segment\n}\n\nfunction parseIndexSegment(segment: string): PathSegment {\n  return Number(segment.replace(/[^\\d]/g, ''))\n}\n\nfunction parseKeySegment(segment: string): KeyedSegment {\n  const segments = segment.match(reKeySegment)\n  return {_key: segments![1]}\n}\n\nfunction parseIndexTupleSegment(segment: string): IndexTuple {\n  const [from, to] = segment.split(':').map((seg) => (seg === '' ? seg : Number(seg)))\n  return [from, to]\n}\n","import * as studioPath from './studioPath'\nimport type {\n  ContentSourceMapParsedPath,\n  ContentSourceMapParsedPathKeyedSegment,\n  ContentSourceMapPaths,\n  Path,\n} from './types'\n\nconst ESCAPE: Record<string, string> = {\n  '\\f': '\\\\f',\n  '\\n': '\\\\n',\n  '\\r': '\\\\r',\n  '\\t': '\\\\t',\n  \"'\": \"\\\\'\",\n  '\\\\': '\\\\\\\\',\n}\n\nconst UNESCAPE: Record<string, string> = {\n  '\\\\f': '\\f',\n  '\\\\n': '\\n',\n  '\\\\r': '\\r',\n  '\\\\t': '\\t',\n  \"\\\\'\": \"'\",\n  '\\\\\\\\': '\\\\',\n}\n\n/**\n * @internal\n */\nexport function jsonPath(path: ContentSourceMapParsedPath): ContentSourceMapPaths[number] {\n  return `$${path\n    .map((segment) => {\n      if (typeof segment === 'string') {\n        const escapedKey = segment.replace(/[\\f\\n\\r\\t'\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `['${escapedKey}']`\n      }\n\n      if (typeof segment === 'number') {\n        return `[${segment}]`\n      }\n\n      if (segment._key !== '') {\n        const escapedKey = segment._key.replace(/['\\\\]/g, (match) => {\n          return ESCAPE[match]\n        })\n        return `[?(@._key=='${escapedKey}')]`\n      }\n\n      return `[${segment._index}]`\n    })\n    .join('')}`\n}\n\n/**\n * @internal\n */\nexport function parseJsonPath(path: ContentSourceMapPaths[number]): ContentSourceMapParsedPath {\n  const parsed: ContentSourceMapParsedPath = []\n\n  const parseRe = /\\['(.*?)'\\]|\\[(\\d+)\\]|\\[\\?\\(@\\._key=='(.*?)'\\)\\]/g\n  let match: RegExpExecArray | null\n\n  while ((match = parseRe.exec(path)) !== null) {\n    if (match[1] !== undefined) {\n      const key = match[1].replace(/\\\\(\\\\|f|n|r|t|')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push(key)\n      continue\n    }\n\n    if (match[2] !== undefined) {\n      parsed.push(parseInt(match[2], 10))\n      continue\n    }\n\n    if (match[3] !== undefined) {\n      const _key = match[3].replace(/\\\\(\\\\')/g, (m) => {\n        return UNESCAPE[m]\n      })\n\n      parsed.push({\n        _key,\n        _index: -1,\n      })\n      continue\n    }\n  }\n\n  return parsed\n}\n\n/**\n * @internal\n */\nexport function jsonPathToStudioPath(path: ContentSourceMapParsedPath): Path {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._key !== '') {\n      return {_key: segment._key}\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\n/**\n * @internal\n */\nexport function studioPathToJsonPath(path: Path | string): ContentSourceMapParsedPath {\n  const parsedPath = typeof path === 'string' ? studioPath.fromString(path) : path\n\n  return parsedPath.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (Array.isArray(segment)) {\n      throw new Error(`IndexTuple segments aren't supported:${JSON.stringify(segment)}`)\n    }\n\n    if (isContentSourceMapParsedPathKeyedSegment(segment)) {\n      return segment\n    }\n\n    if (segment._key) {\n      return {_key: segment._key, _index: -1}\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n\nfunction isContentSourceMapParsedPathKeyedSegment(\n  segment: studioPath.PathSegment | ContentSourceMapParsedPath[number],\n): segment is ContentSourceMapParsedPathKeyedSegment {\n  return typeof segment === 'object' && '_key' in segment && '_index' in segment\n}\n\n/**\n * @internal\n */\nexport function jsonPathToMappingPath(path: ContentSourceMapParsedPath): (string | number)[] {\n  return path.map((segment) => {\n    if (typeof segment === 'string') {\n      return segment\n    }\n\n    if (typeof segment === 'number') {\n      return segment\n    }\n\n    if (segment._index !== -1) {\n      return segment._index\n    }\n\n    throw new Error(`invalid segment:${JSON.stringify(segment)}`)\n  })\n}\n","import {jsonPath, jsonPathToMappingPath} from './jsonPath'\nimport type {ContentSourceMap, ContentSourceMapMapping, ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolveMapping(\n  resultPath: ContentSourceMapParsedPath,\n  csm?: ContentSourceMap,\n):\n  | {\n      mapping: ContentSourceMapMapping\n      matchedPath: string\n      pathSuffix: string\n    }\n  | undefined {\n  if (!csm?.mappings) {\n    return undefined\n  }\n  const resultMappingPath = jsonPath(jsonPathToMappingPath(resultPath))\n\n  if (csm.mappings[resultMappingPath] !== undefined) {\n    return {\n      mapping: csm.mappings[resultMappingPath],\n      matchedPath: resultMappingPath,\n      pathSuffix: '',\n    }\n  }\n\n  const mappings = Object.entries(csm.mappings)\n    .filter(([key]) => resultMappingPath.startsWith(key))\n    .sort(([key1], [key2]) => key2.length - key1.length)\n\n  if (mappings.length == 0) {\n    return undefined\n  }\n\n  const [matchedPath, mapping] = mappings[0]\n  const pathSuffix = resultMappingPath.substring(matchedPath.length)\n  return {mapping, matchedPath, pathSuffix}\n}\n","/** @internal */\nexport function isArray(value: unknown): value is Array<unknown> {\n  return value !== null && Array.isArray(value)\n}\n","/** @internal */\nexport function isRecord(value: unknown): value is Record<string, unknown> {\n  return typeof value === 'object' && value !== null\n}\n","import {isArray} from './isArray'\nimport {isRecord} from './isRecord'\nimport type {ContentSourceMapParsedPath, WalkMapFn} from './types'\n\n/**\n * generic way to walk a nested object or array and apply a mapping function to each value\n * @internal\n */\nexport function walkMap(\n  value: unknown,\n  mappingFn: WalkMapFn,\n  path: ContentSourceMapParsedPath = [],\n): unknown {\n  if (isArray(value)) {\n    return value.map((v, idx) => {\n      if (isRecord(v)) {\n        const _key = v['_key']\n        if (typeof _key === 'string') {\n          return walkMap(v, mappingFn, path.concat({_key, _index: idx}))\n        }\n      }\n\n      return walkMap(v, mappingFn, path.concat(idx))\n    })\n  }\n\n  if (isRecord(value)) {\n    return Object.fromEntries(\n      Object.entries(value).map(([k, v]) => [k, walkMap(v, mappingFn, path.concat(k))]),\n    )\n  }\n\n  return mappingFn(value, path)\n}\n","import type {ContentSourceMap} from '@sanity/client/csm'\n\nimport {parseJsonPath} from '../csm/jsonPath'\nimport {resolveMapping} from '../csm/resolveMapping'\nimport {walkMap} from '../csm/walkMap'\nimport type {Encoder} from './types'\n\n/**\n * @internal\n */\nexport function encodeIntoResult<Result>(\n  result: Result,\n  csm: ContentSourceMap,\n  encoder: Encoder,\n): Result {\n  return walkMap(result, (value, path) => {\n    // Only map strings, we could extend this in the future to support other types like integers...\n    if (typeof value !== 'string') {\n      return value\n    }\n\n    const resolveMappingResult = resolveMapping(path, csm)\n    if (!resolveMappingResult) {\n      return value\n    }\n\n    const {mapping, matchedPath} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = csm.documents[mapping.source.document!]\n    const sourcePath = csm.paths[mapping.source.path]\n\n    const matchPathSegments = parseJsonPath(matchedPath)\n    const sourcePathSegments = parseJsonPath(sourcePath)\n    const fullSourceSegments = sourcePathSegments.concat(path.slice(matchPathSegments.length))\n\n    return encoder({\n      sourcePath: fullSourceSegments,\n      sourceDocument,\n      resultPath: path,\n      value,\n    })\n  }) as Result\n}\n","export const DRAFTS_PREFIX = 'drafts.'\n\n/** @internal */\nexport function getPublishedId(id: string): string {\n  if (id.startsWith(DRAFTS_PREFIX)) {\n    return id.slice(DRAFTS_PREFIX.length)\n  }\n\n  return id\n}\n","import {DRAFTS_PREFIX, getPublishedId} from './getPublishedId'\nimport {jsonPathToStudioPath} from './jsonPath'\nimport * as studioPath from './studioPath'\nimport type {CreateEditUrlOptions, EditIntentUrl, StudioBaseUrl} from './types'\n\n/** @internal */\nexport function createEditUrl(options: CreateEditUrlOptions): `${StudioBaseUrl}${EditIntentUrl}` {\n  const {\n    baseUrl,\n    workspace: _workspace = 'default',\n    tool: _tool = 'default',\n    id: _id,\n    type,\n    path,\n    projectId,\n    dataset,\n  } = options\n\n  if (!baseUrl) {\n    throw new Error('baseUrl is required')\n  }\n  if (!path) {\n    throw new Error('path is required')\n  }\n  if (!_id) {\n    throw new Error('id is required')\n  }\n  if (baseUrl !== '/' && baseUrl.endsWith('/')) {\n    throw new Error('baseUrl must not end with a slash')\n  }\n\n  const workspace = _workspace === 'default' ? undefined : _workspace\n  const tool = _tool === 'default' ? undefined : _tool\n  const id = getPublishedId(_id)\n  const stringifiedPath = Array.isArray(path)\n    ? studioPath.toString(jsonPathToStudioPath(path))\n    : path\n\n  // eslint-disable-next-line no-warning-comments\n  // @TODO Using searchParams as a temporary workaround until `@sanity/overlays` can decode state from the path reliably\n  const searchParams = new URLSearchParams({\n    baseUrl,\n    id,\n    type,\n    path: stringifiedPath,\n  })\n  if (workspace) {\n    searchParams.set('workspace', workspace)\n  }\n  if (tool) {\n    searchParams.set('tool', tool)\n  }\n  if (projectId) {\n    searchParams.set('projectId', projectId)\n  }\n  if (dataset) {\n    searchParams.set('dataset', dataset)\n  }\n  if (_id.startsWith(DRAFTS_PREFIX)) {\n    searchParams.set('isDraft', '')\n  }\n\n  const segments = [baseUrl === '/' ? '' : baseUrl]\n  if (workspace) {\n    segments.push(workspace)\n  }\n  const routerParams = [\n    'mode=presentation',\n    `id=${id}`,\n    `type=${type}`,\n    `path=${encodeURIComponent(stringifiedPath)}`,\n  ]\n  if (tool) {\n    routerParams.push(`tool=${tool}`)\n  }\n  segments.push('intent', 'edit', `${routerParams.join(';')}?${searchParams}`)\n  return segments.join('/') as unknown as `${StudioBaseUrl}${EditIntentUrl}`\n}\n","import {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport type {\n  CreateEditUrlOptions,\n  ResolveEditInfoOptions,\n  StudioBaseRoute,\n  StudioBaseUrl,\n  StudioUrl,\n} from './types'\n\n/** @internal */\nexport function resolveEditInfo(options: ResolveEditInfoOptions): CreateEditUrlOptions | undefined {\n  const {resultSourceMap: csm, resultPath} = options\n  const {mapping, pathSuffix} = resolveMapping(resultPath, csm) || {}\n\n  if (!mapping) {\n    // console.warn('no mapping for path', { path: resultPath, sourceMap: csm })\n    return undefined\n  }\n\n  if (mapping.source.type === 'literal') {\n    return undefined\n  }\n\n  if (mapping.source.type === 'unknown') {\n    return undefined\n  }\n\n  const sourceDoc = csm.documents[mapping.source.document]\n  const sourcePath = csm.paths[mapping.source.path]\n\n  if (sourceDoc && sourcePath) {\n    const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n      typeof options.studioUrl === 'function' ? options.studioUrl(sourceDoc) : options.studioUrl,\n    )\n    if (!baseUrl) return undefined\n    const {_id, _type, _projectId, _dataset} = sourceDoc\n    return {\n      baseUrl,\n      workspace,\n      tool,\n      id: _id,\n      type: _type,\n      path: parseJsonPath(sourcePath + pathSuffix),\n      projectId: _projectId,\n      dataset: _dataset,\n    } satisfies CreateEditUrlOptions\n  }\n\n  return undefined\n}\n\n/** @internal */\nexport function resolveStudioBaseRoute(studioUrl: StudioUrl): StudioBaseRoute {\n  let baseUrl: StudioBaseUrl = typeof studioUrl === 'string' ? studioUrl : studioUrl.baseUrl\n  if (baseUrl !== '/') {\n    baseUrl = baseUrl.replace(/\\/$/, '')\n  }\n  if (typeof studioUrl === 'string') {\n    return {baseUrl}\n  }\n  return {...studioUrl, baseUrl}\n}\n","import type {ContentSourceMapParsedPath, FilterDefault} from './types'\n\nexport const filterDefault: FilterDefault = ({sourcePath, resultPath, value}) => {\n  // Skips encoding on URL or Date strings, similar to the `skip: 'auto'` parameter in vercelStegaCombine()\n  if (isValidDate(value) || isValidURL(value)) {\n    return false\n  }\n\n  const endPath = sourcePath.at(-1)\n  // Never encode slugs\n  if (sourcePath.at(-2) === 'slug' && endPath === 'current') {\n    return false\n  }\n\n  // Skip underscored keys, needs better heuristics but it works for now\n  if (typeof endPath === 'string' && endPath.startsWith('_')) {\n    return false\n  }\n\n  /**\n   * Best effort infer Portable Text paths that should not be encoded.\n   * Nothing is for certain, and the below implementation may cause paths that aren't Portable Text and otherwise be safe to encode to be skipped.\n   * However, that's ok as userland can always opt-in with the `encodeSourceMapAtPath` option and mark known safe paths as such, which will override this heuristic.\n   */\n  // If the path ends in marks[number] it's likely a PortableTextSpan: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#LL154C16-L154C16\n  if (typeof endPath === 'number' && sourcePath.at(-2) === 'marks') {\n    return false\n  }\n  // Or if it's [number].markDefs[number].href it's likely a PortableTextLink: https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L163\n  if (\n    endPath === 'href' &&\n    typeof sourcePath.at(-2) === 'number' &&\n    sourcePath.at(-3) === 'markDefs'\n  ) {\n    return false\n  }\n  // Otherwise we have to deal with special properties of PortableTextBlock, and we can't confidently know if it's actually a `_type: 'block'` array item or not.\n  // All we know is that if it is indeed a block, and we encode the strings on these keys it'll for sure break the PortableText rendering and thus we skip encoding.\n  // https://github.com/portabletext/types/blob/e54eb24f136d8efd51a46c6a190e7c46e79b5380/src/portableText.ts#L48-L58\n  if (endPath === 'style' || endPath === 'listItem') {\n    return false\n  }\n\n  // Don't encode into anything that is suggested it'll render for SEO in meta tags\n  if (\n    sourcePath.some(\n      (path) => path === 'meta' || path === 'metadata' || path === 'openGraph' || path === 'seo',\n    )\n  ) {\n    return false\n  }\n\n  // If the sourcePath or resultPath contains something that sounds like a type, like iconType, we skip encoding, as it's most\n  // of the time used for logic that breaks if it contains stega characters\n  if (hasTypeLike(sourcePath) || hasTypeLike(resultPath)) {\n    return false\n  }\n\n  // Finally, we ignore a bunch of paths that are typically used for page building\n  if (typeof endPath === 'string' && denylist.has(endPath)) {\n    return false\n  }\n\n  return true\n}\n\nconst denylist = new Set([\n  'color',\n  'colour',\n  'currency',\n  'email',\n  'format',\n  'gid',\n  'hex',\n  'href',\n  'hsl',\n  'hsla',\n  'icon',\n  'id',\n  'index',\n  'key',\n  'language',\n  'layout',\n  'link',\n  'linkAction',\n  'locale',\n  'lqip',\n  'page',\n  'path',\n  'ref',\n  'rgb',\n  'rgba',\n  'route',\n  'secret',\n  'slug',\n  'status',\n  'tag',\n  'template',\n  'theme',\n  'type',\n  'unit',\n  'url',\n  'username',\n  'variant',\n  'website',\n])\n\nfunction isValidDate(dateString: string) {\n  return /^\\d{4}-\\d{2}-\\d{2}/.test(dateString) ? Boolean(Date.parse(dateString)) : false\n}\n\nfunction isValidURL(url: string) {\n  try {\n    new URL(url, url.startsWith('/') ? 'https://acme.com' : undefined)\n  } catch {\n    return false\n  }\n  return true\n}\n\nfunction hasTypeLike(path: ContentSourceMapParsedPath): boolean {\n  return path.some((segment) => typeof segment === 'string' && segment.match(/type/i) !== null)\n}\n","import {vercelStegaCombine} from '@vercel/stega'\n\nimport {createEditUrl} from '../csm/createEditUrl'\nimport {jsonPathToStudioPath} from '../csm/jsonPath'\nimport {resolveStudioBaseRoute} from '../csm/resolveEditInfo'\nimport {reKeySegment, toString as studioPathToString} from '../csm/studioPath'\nimport {encodeIntoResult} from './encodeIntoResult'\nimport {filterDefault} from './filterDefault'\nimport {ContentSourceMap, ContentSourceMapParsedPath, InitializedStegaConfig} from './types'\n\nconst TRUNCATE_LENGTH = 20\n\n/**\n * Uses `@vercel/stega` to embed edit info JSON into strings in your query result.\n * The JSON payloads are added using invisible characters so they don't show up visually.\n * The edit info is generated from the Content Source Map (CSM) that is returned from Sanity for the query.\n * @public\n */\nexport function stegaEncodeSourceMap<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  config: InitializedStegaConfig,\n): Result {\n  const {filter, logger, enabled} = config\n  if (!enabled) {\n    const msg = \"config.enabled must be true, don't call this function otherwise\"\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  if (!resultSourceMap) {\n    logger?.error?.('[@sanity/client]: Missing Content Source Map from response body', {\n      result,\n      resultSourceMap,\n      config,\n    })\n    return result\n  }\n\n  if (!config.studioUrl) {\n    const msg = 'config.studioUrl must be defined'\n    logger?.error?.(`[@sanity/client]: ${msg}`, {result, resultSourceMap, config})\n    throw new TypeError(msg)\n  }\n\n  const report: Record<'encoded' | 'skipped', {path: string; length: number; value: string}[]> = {\n    encoded: [],\n    skipped: [],\n  }\n\n  const resultWithStega = encodeIntoResult(\n    result,\n    resultSourceMap,\n    ({sourcePath, sourceDocument, resultPath, value}) => {\n      // Allow userland to control when to opt-out of encoding\n      if (\n        (typeof filter === 'function'\n          ? filter({sourcePath, resultPath, filterDefault, sourceDocument, value})\n          : filterDefault({sourcePath, resultPath, filterDefault, sourceDocument, value})) === false\n      ) {\n        if (logger) {\n          report.skipped.push({\n            path: prettyPathForLogging(sourcePath),\n            value: `${value.slice(0, TRUNCATE_LENGTH)}${\n              value.length > TRUNCATE_LENGTH ? '...' : ''\n            }`,\n            length: value.length,\n          })\n        }\n        return value\n      }\n\n      if (logger) {\n        report.encoded.push({\n          path: prettyPathForLogging(sourcePath),\n          value: `${value.slice(0, TRUNCATE_LENGTH)}${value.length > TRUNCATE_LENGTH ? '...' : ''}`,\n          length: value.length,\n        })\n      }\n\n      const {baseUrl, workspace, tool} = resolveStudioBaseRoute(\n        typeof config.studioUrl === 'function'\n          ? config.studioUrl(sourceDocument)\n          : config.studioUrl!,\n      )\n      if (!baseUrl) return value\n      const {_id: id, _type: type, _projectId: projectId, _dataset: dataset} = sourceDocument\n\n      return vercelStegaCombine(\n        value,\n        {\n          origin: 'sanity.io',\n          href: createEditUrl({\n            baseUrl,\n            workspace,\n            tool,\n            id,\n            type,\n            path: sourcePath,\n            ...(!config.omitCrossDatasetReferenceData && {dataset, projectId}),\n          }),\n        },\n        // We use custom logic to determine if we should skip encoding\n        false,\n      )\n    },\n  )\n\n  if (logger) {\n    const isSkipping = report.skipped.length\n    const isEncoding = report.encoded.length\n    if (isSkipping || isEncoding) {\n      ;(logger?.groupCollapsed || logger.log)?.('[@sanity/client]: Encoding source map into result')\n      logger.log?.(\n        `[@sanity/client]: Paths encoded: ${report.encoded.length}, skipped: ${report.skipped.length}`,\n      )\n    }\n    if (report.encoded.length > 0) {\n      logger?.log?.(`[@sanity/client]: Table of encoded paths`)\n      ;(logger?.table || logger.log)?.(report.encoded)\n    }\n    if (report.skipped.length > 0) {\n      const skipped = new Set<string>()\n      for (const {path} of report.skipped) {\n        skipped.add(path.replace(reKeySegment, '0').replace(/\\[\\d+\\]/g, '[]'))\n      }\n      logger?.log?.(`[@sanity/client]: List of skipped paths`, [...skipped.values()])\n    }\n\n    if (isSkipping || isEncoding) {\n      logger?.groupEnd?.()\n    }\n  }\n\n  return resultWithStega\n}\n\nfunction prettyPathForLogging(path: ContentSourceMapParsedPath): string {\n  return studioPathToString(jsonPathToStudioPath(path))\n}\n"],"mappings":";AAeO,MAAMA,YAAA,GAAe;AASrB,SAASC,aAAaC,OAAA,EAA+C;EAC1E,OAAI,OAAOA,OAAA,IAAY,WACdF,YAAA,CAAaG,IAAA,CAAKD,OAAA,CAAQE,IAAA,CAAM,KAGlC,OAAOF,OAAA,IAAY,YAAY,UAAUA,OAAA;AAClD;AA8DO,SAASG,SAASC,IAAA,EAAoB;EACvC,KAACC,KAAA,CAAMC,OAAA,CAAQF,IAAI,GACf,UAAIG,KAAA,CAAM,sBAAsB;EAGxC,OAAOH,IAAA,CAAKI,MAAA,CAAe,CAACC,MAAA,EAAQT,OAAA,EAASU,CAAA,KAAM;IACjD,MAAMC,WAAA,GAAc,OAAOX,OAAA;IAC3B,IAAIW,WAAA,KAAgB,UACX,UAAGF,MAAM,IAAIT,OAAO;IAG7B,IAAIW,WAAA,KAAgB,UAEX,UAAGF,MAAM,GADEC,CAAA,KAAM,IAAI,KAAK,GACL,GAAGV,OAAO;IAGpC,IAAAD,YAAA,CAAaC,OAAO,KAAKA,OAAA,CAAQY,IAAA,EACnC,OAAO,GAAGH,MAAM,WAAWT,OAAA,CAAQY,IAAI;IAGrC,IAAAP,KAAA,CAAMC,OAAA,CAAQN,OAAO,GAAG;MACpB,OAACa,IAAA,EAAMC,EAAE,IAAId,OAAA;MACnB,OAAO,GAAGS,MAAM,IAAII,IAAI,IAAIC,EAAE;IAChC;IAEA,MAAM,IAAIP,KAAA,CAAM,8BAA8BQ,IAAA,CAAKC,SAAA,CAAUhB,OAAO,CAAC,IAAI;EAAA,GACxE,EAAE;AACP;AC/GA,MAAMiB,MAAA,GAAiC;IACrC,MAAM;IACN,MAAM;IACN,MAAM;IACN,KAAM;IACN,KAAK;IACL,MAAM;EACR;EAEMC,QAAA,GAAmC;IACvC,OAAO;IACP,OAAO;AAAA;IACP,OAAO;IACP,OAAO;IACP,OAAO;IACP,QAAQ;EACV;AAKO,SAASC,SAASf,IAAA,EAAiE;EACjF,WAAIA,IAAA,CACRgB,GAAA,CAAKpB,OAAA,IACA,OAAOA,OAAA,IAAY,WAId,KAHYA,OAAA,CAAQqB,OAAA,CAAQ,kBAAmBC,KAAA,IAC7CL,MAAA,CAAOK,KAAK,CACpB,CACqB,OAGpB,OAAOtB,OAAA,IAAY,WACd,IAAIA,OAAO,MAGhBA,OAAA,CAAQY,IAAA,KAAS,KAIZ,eAHYZ,OAAA,CAAQY,IAAA,CAAKS,OAAA,CAAQ,UAAWC,KAAA,IAC1CL,MAAA,CAAOK,KAAK,CACpB,CAC+B,QAG3B,IAAItB,OAAA,CAAQuB,MAAM,GAC1B,EACAC,IAAA,CAAK,EAAE,CAAC;AACb;AAKO,SAASC,cAAcrB,IAAA,EAAiE;EACvF,MAAAsB,MAAA,GAAqC;IAErCC,OAAA,GAAU;EACZ,IAAAL,KAAA;EAEJ,QAAQA,KAAA,GAAQK,OAAA,CAAQC,IAAA,CAAKxB,IAAI,OAAO,OAAM;IACxC,IAAAkB,KAAA,CAAM,CAAC,MAAM,QAAW;MACpB,MAAAO,GAAA,GAAMP,KAAA,CAAM,CAAC,EAAED,OAAA,CAAQ,qBAAsBS,CAAA,IAC1CZ,QAAA,CAASY,CAAC,CAClB;MAEDJ,MAAA,CAAOK,IAAA,CAAKF,GAAG;MACf;IACF;IAEI,IAAAP,KAAA,CAAM,CAAC,MAAM,QAAW;MAC1BI,MAAA,CAAOK,IAAA,CAAKC,QAAA,CAASV,KAAA,CAAM,CAAC,GAAG,EAAE,CAAC;MAClC;IACF;IAEI,IAAAA,KAAA,CAAM,CAAC,MAAM,QAAW;MACpB,MAAAV,IAAA,GAAOU,KAAA,CAAM,CAAC,EAAED,OAAA,CAAQ,YAAaS,CAAA,IAClCZ,QAAA,CAASY,CAAC,CAClB;MAEDJ,MAAA,CAAOK,IAAA,CAAK;QACVnB,IAAA;QACAW,MAAA,EAAQ;MAAA,CACT;MACD;IACF;EACF;EAEO,OAAAG,MAAA;AACT;AAKO,SAASO,qBAAqB7B,IAAA,EAAwC;EACpE,OAAAA,IAAA,CAAKgB,GAAA,CAAKpB,OAAA,IAAY;IAK3B,IAJI,OAAOA,OAAA,IAAY,YAInB,OAAOA,OAAA,IAAY,UACd,OAAAA,OAAA;IAGT,IAAIA,OAAA,CAAQY,IAAA,KAAS,IACZ;MAACA,IAAA,EAAMZ,OAAA,CAAQY;IAAA;IAGxB,IAAIZ,OAAA,CAAQuB,MAAA,KAAW,IACrB,OAAOvB,OAAA,CAAQuB,MAAA;IAGjB,MAAM,IAAIhB,KAAA,CAAM,mBAAmBQ,IAAA,CAAKC,SAAA,CAAUhB,OAAO,CAAC,EAAE;EAAA,CAC7D;AACH;AA0CO,SAASkC,sBAAsB9B,IAAA,EAAuD;EACpF,OAAAA,IAAA,CAAKgB,GAAA,CAAKpB,OAAA,IAAY;IAK3B,IAJI,OAAOA,OAAA,IAAY,YAInB,OAAOA,OAAA,IAAY,UACd,OAAAA,OAAA;IAGT,IAAIA,OAAA,CAAQuB,MAAA,KAAW,IACrB,OAAOvB,OAAA,CAAQuB,MAAA;IAGjB,MAAM,IAAIhB,KAAA,CAAM,mBAAmBQ,IAAA,CAAKC,SAAA,CAAUhB,OAAO,CAAC,EAAE;EAAA,CAC7D;AACH;AC1KgB,SAAAmC,eACdC,UAAA,EACAC,GAAA,EAOY;EACZ,IAAI,EAACA,GAAA,IAAK,QAAAA,GAAA,CAAAC,QAAA,GACR;EAEF,MAAMC,iBAAA,GAAoBpB,QAAA,CAASe,qBAAA,CAAsBE,UAAU,CAAC;EAEhE,IAAAC,GAAA,CAAIC,QAAA,CAASC,iBAAiB,MAAM,QAC/B;IACLC,OAAA,EAASH,GAAA,CAAIC,QAAA,CAASC,iBAAiB;IACvCE,WAAA,EAAaF,iBAAA;IACbG,UAAA,EAAY;EAAA;EAIV,MAAAJ,QAAA,GAAWK,MAAA,CAAOC,OAAA,CAAQP,GAAA,CAAIC,QAAQ,EACzCO,MAAA,CAAO,CAAC,CAAChB,GAAG,MAAMU,iBAAA,CAAkBO,UAAA,CAAWjB,GAAG,CAAC,EACnDkB,IAAA,CAAK,CAAC,CAACC,IAAI,GAAG,CAACC,IAAI,MAAMA,IAAA,CAAKC,MAAA,GAASF,IAAA,CAAKE,MAAM;EAErD,IAAIZ,QAAA,CAASY,MAAA,IAAU,GACrB;EAGI,OAACT,WAAA,EAAaD,OAAO,IAAIF,QAAA,CAAS,CAAC;IACnCI,UAAA,GAAaH,iBAAA,CAAkBY,SAAA,CAAUV,WAAA,CAAYS,MAAM;EAC1D;IAACV,OAAA;IAASC,WAAA;IAAaC;EAAA;AAChC;ACvCO,SAASpC,QAAQ8C,KAAA,EAAyC;EAC/D,OAAOA,KAAA,KAAU,QAAQ/C,KAAA,CAAMC,OAAA,CAAQ8C,KAAK;AAC9C;ACFO,SAASC,SAASD,KAAA,EAAkD;EAClE,cAAOA,KAAA,IAAU,YAAYA,KAAA,KAAU;AAChD;ACKO,SAASE,QACdF,KAAA,EACAG,SAAA,EACAnD,IAAA,GAAmC,IAC1B;EACT,OAAIE,OAAA,CAAQ8C,KAAK,IACRA,KAAA,CAAMhC,GAAA,CAAI,CAACoC,CAAA,EAAGC,GAAA,KAAQ;IACvB,IAAAJ,QAAA,CAASG,CAAC,GAAG;MACf,MAAM5C,IAAA,GAAO4C,CAAA,CAAE5C,IAAA;MACf,IAAI,OAAOA,IAAA,IAAS,UACX,OAAA0C,OAAA,CAAQE,CAAA,EAAGD,SAAA,EAAWnD,IAAA,CAAKsD,MAAA,CAAO;QAAC9C,IAAA;QAAMW,MAAA,EAAQkC;MAAI,EAAC;IAEjE;IAEA,OAAOH,OAAA,CAAQE,CAAA,EAAGD,SAAA,EAAWnD,IAAA,CAAKsD,MAAA,CAAOD,GAAG,CAAC;EAC9C,KAGCJ,QAAA,CAASD,KAAK,IACTT,MAAA,CAAOgB,WAAA,CACZhB,MAAA,CAAOC,OAAA,CAAQQ,KAAK,EAAEhC,GAAA,CAAI,CAAC,CAACwC,CAAA,EAAGJ,CAAC,MAAM,CAACI,CAAA,EAAGN,OAAA,CAAQE,CAAA,EAAGD,SAAA,EAAWnD,IAAA,CAAKsD,MAAA,CAAOE,CAAC,CAAC,CAAC,CAAC,KAI7EL,SAAA,CAAUH,KAAA,EAAOhD,IAAI;AAC9B;ACvBgB,SAAAyD,iBACdC,MAAA,EACAzB,GAAA,EACA0B,OAAA,EACQ;EACR,OAAOT,OAAA,CAAQQ,MAAA,EAAQ,CAACV,KAAA,EAAOhD,IAAA,KAAS;IAEtC,IAAI,OAAOgD,KAAA,IAAU,UACZ,OAAAA,KAAA;IAGH,MAAAY,oBAAA,GAAuB7B,cAAA,CAAe/B,IAAA,EAAMiC,GAAG;IACrD,IAAI,CAAC2B,oBAAA,EACI,OAAAZ,KAAA;IAGH;MAACZ,OAAA;MAASC;IAAe,IAAAuB,oBAAA;IAK/B,IAJIxB,OAAA,CAAQyB,IAAA,KAAS,WAIjBzB,OAAA,CAAQ0B,MAAA,CAAOD,IAAA,KAAS,iBACnB,OAAAb,KAAA;IAGH,MAAAe,cAAA,GAAiB9B,GAAA,CAAI+B,SAAA,CAAU5B,OAAA,CAAQ0B,MAAA,CAAOG,QAAS;MACvDC,UAAA,GAAajC,GAAA,CAAIkC,KAAA,CAAM/B,OAAA,CAAQ0B,MAAA,CAAO9D,IAAI;MAE1CoE,iBAAA,GAAoB/C,aAAA,CAAcgB,WAAW;MAE7CgC,kBAAA,GADqBhD,aAAA,CAAc6C,UAAU,EACLZ,MAAA,CAAOtD,IAAA,CAAKsE,KAAA,CAAMF,iBAAA,CAAkBtB,MAAM,CAAC;IAEzF,OAAOa,OAAA,CAAQ;MACbO,UAAA,EAAYG,kBAAA;MACZN,cAAA;MACA/B,UAAA,EAAYhC,IAAA;MACZgD;IAAA,CACD;EAAA,CACF;AACH;ACjDO,MAAMuB,aAAA,GAAgB;AAGtB,SAASC,eAAeC,EAAA,EAAoB;EAC7C,OAAAA,EAAA,CAAG/B,UAAA,CAAW6B,aAAa,IACtBE,EAAA,CAAGH,KAAA,CAAMC,aAAA,CAAczB,MAAM,IAG/B2B,EAAA;AACT;ACHO,SAASC,cAAcC,OAAA,EAAmE;EACzF;IACJC,OAAA;IACAC,SAAA,EAAWC,UAAA,GAAa;IACxBC,IAAA,EAAMC,KAAA,GAAQ;IACdP,EAAA,EAAIQ,GAAA;IACJpB,IAAA;IACA7D,IAAA;IACAkF,SAAA;IACAC;EACE,IAAAR,OAAA;EAEJ,IAAI,CAACC,OAAA,EACG,UAAIzE,KAAA,CAAM,qBAAqB;EAEvC,IAAI,CAACH,IAAA,EACG,UAAIG,KAAA,CAAM,kBAAkB;EAEpC,IAAI,CAAC8E,GAAA,EACG,UAAI9E,KAAA,CAAM,gBAAgB;EAElC,IAAIyE,OAAA,KAAY,OAAOA,OAAA,CAAQQ,QAAA,CAAS,GAAG,GACnC,UAAIjF,KAAA,CAAM,mCAAmC;EAGrD,MAAM0E,SAAA,GAAYC,UAAA,KAAe,YAAY,SAAYA,UAAA;IACnDC,IAAA,GAAOC,KAAA,KAAU,YAAY,SAAYA,KAAA;IACzCP,EAAA,GAAKD,cAAA,CAAeS,GAAG;IACvBI,eAAA,GAAkBpF,KAAA,CAAMC,OAAA,CAAQF,IAAI,IACtCD,QAAA,CAAoB8B,oBAAA,CAAqB7B,IAAI,CAAC,IAC9CA,IAAA;IAIEsF,YAAA,GAAe,IAAIC,eAAA,CAAgB;MACvCX,OAAA;MACAH,EAAA;MACAZ,IAAA;MACA7D,IAAA,EAAMqF;IAAA,CACP;EACGR,SAAA,IACFS,YAAA,CAAaE,GAAA,CAAI,aAAaX,SAAS,GAErCE,IAAA,IACFO,YAAA,CAAaE,GAAA,CAAI,QAAQT,IAAI,GAE3BG,SAAA,IACFI,YAAA,CAAaE,GAAA,CAAI,aAAaN,SAAS,GAErCC,OAAA,IACFG,YAAA,CAAaE,GAAA,CAAI,WAAWL,OAAO,GAEjCF,GAAA,CAAIvC,UAAA,CAAW6B,aAAa,KAC9Be,YAAA,CAAaE,GAAA,CAAI,WAAW,EAAE;EAGhC,MAAMC,QAAA,GAAW,CAACb,OAAA,KAAY,MAAM,KAAKA,OAAO;EAC5CC,SAAA,IACFY,QAAA,CAAS9D,IAAA,CAAKkD,SAAS;EAEzB,MAAMa,YAAA,GAAe,CACnB,qBACA,MAAMjB,EAAE,IACR,QAAQZ,IAAI,IACZ,QAAQ8B,kBAAA,CAAmBN,eAAe,CAAC;EAEzC,OAAAN,IAAA,IACFW,YAAA,CAAa/D,IAAA,CAAK,QAAQoD,IAAI,EAAE,GAElCU,QAAA,CAAS9D,IAAA,CAAK,UAAU,QAAQ,GAAG+D,YAAA,CAAatE,IAAA,CAAK,GAAG,CAAC,IAAIkE,YAAY,EAAE,GACpEG,QAAA,CAASrE,IAAA,CAAK,GAAG;AAC1B;ACxBO,SAASwE,uBAAuBC,SAAA,EAAuC;EAC5E,IAAIjB,OAAA,GAAyB,OAAOiB,SAAA,IAAc,WAAWA,SAAA,GAAYA,SAAA,CAAUjB,OAAA;EAInF,OAHIA,OAAA,KAAY,QACdA,OAAA,GAAUA,OAAA,CAAQ3D,OAAA,CAAQ,OAAO,EAAE,IAEjC,OAAO4E,SAAA,IAAc,WAChB;IAACjB;EAAA,IAEH;IAAC,GAAGiB,SAAA;IAAWjB;EAAA;AACxB;AC5DO,MAAMkB,aAAA,GAA+BA,CAAC;IAAC5B,UAAA;IAAYlC,UAAA;IAAYgB;EAAA,MAAW;IAE/E,IAAI+C,WAAA,CAAY/C,KAAK,KAAKgD,UAAA,CAAWhD,KAAK,GACjC;IAGH,MAAAiD,OAAA,GAAU/B,UAAA,CAAWgC,EAAA,CAAG,EAAE;IAmDhC,OAjDI,EAAAhC,UAAA,CAAWgC,EAAA,CAAG,EAAE,MAAM,UAAUD,OAAA,KAAY,aAK5C,OAAOA,OAAA,IAAY,YAAYA,OAAA,CAAQvD,UAAA,CAAW,GAAG,KAUrD,OAAOuD,OAAA,IAAY,YAAY/B,UAAA,CAAWgC,EAAA,CAAG,EAAE,MAAM,WAKvDD,OAAA,KAAY,UACZ,OAAO/B,UAAA,CAAWgC,EAAA,CAAG,EAAE,KAAM,YAC7BhC,UAAA,CAAWgC,EAAA,CAAG,EAAE,MAAM,cAOpBD,OAAA,KAAY,WAAWA,OAAA,KAAY,cAMrC/B,UAAA,CAAWiC,IAAA,CACRnG,IAAA,IAASA,IAAA,KAAS,UAAUA,IAAA,KAAS,cAAcA,IAAA,KAAS,eAAeA,IAAA,KAAS,KAQrF,KAAAoG,WAAA,CAAYlC,UAAU,KAAKkC,WAAA,CAAYpE,UAAU,KAKjD,OAAOiE,OAAA,IAAY,YAAYI,QAAA,CAASC,GAAA,CAAIL,OAAO;EAKzD;EAEMI,QAAA,sBAAeE,GAAA,CAAI,CACvB,SACA,UACA,YACA,SACA,UACA,OACA,OACA,QACA,OACA,QACA,QACA,MACA,SACA,OACA,YACA,UACA,QACA,cACA,UACA,QACA,QACA,QACA,OACA,OACA,QACA,SACA,UACA,QACA,UACA,OACA,YACA,SACA,QACA,QACA,OACA,YACA,WACA,UACD;AAED,SAASR,YAAYS,UAAA,EAAoB;EAChC,4BAAqB3G,IAAA,CAAK2G,UAAU,IAAI,EAAQC,IAAA,CAAKC,KAAA,CAAMF,UAAU,IAAK;AACnF;AAEA,SAASR,WAAWW,GAAA,EAAa;EAC3B;IACF,IAAIC,GAAA,CAAID,GAAA,EAAKA,GAAA,CAAIjE,UAAA,CAAW,GAAG,IAAI,qBAAqB,MAAS;EAAA,QAC3D;IACC;EACT;EACO;AACT;AAEA,SAAS0D,YAAYpG,IAAA,EAA2C;EACvD,OAAAA,IAAA,CAAKmG,IAAA,CAAMvG,OAAA,IAAY,OAAOA,OAAA,IAAY,YAAYA,OAAA,CAAQsB,KAAA,CAAM,OAAO,MAAM,IAAI;AAC9F;AChHA,MAAM2F,eAAA,GAAkB;AAQR,SAAAC,qBACdpD,MAAA,EACAqD,eAAA,EACAC,MAAA,EACQ;EAtBV,IAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA;EAuBE,MAAM;IAAChF,MAAA;IAAQiF,MAAA;IAAQC;EAAA,IAAWX,MAAA;EAClC,IAAI,CAACW,OAAA,EAAS;IACZ,MAAMC,GAAA,GAAM;IACZ,OAAAX,EAAA,GAAAS,MAAA,oBAAAA,MAAA,CAAQG,KAAA,KAAR,QAAAZ,EAAA,CAAAa,IAAA,CAAAJ,MAAA,EAAgB,qBAAqBE,GAAG,IAAI;MAAClE,MAAA;MAAQqD,eAAA;MAAiBC;IAAM,IACtE,IAAIe,SAAA,CAAUH,GAAG;EACzB;EAEA,IAAI,CAACb,eAAA,EACK,QAAAG,EAAA,GAAAQ,MAAA,oBAAAA,MAAA,CAAAG,KAAA,KAAR,QAAAX,EAAA,CAAAY,IAAA,CAAAJ,MAAA,EAAgB,mEAAmE;IACjFhE,MAAA;IACAqD,eAAA;IACAC;EAEK,IAAAtD,MAAA;EAGL,KAACsD,MAAA,CAAOnB,SAAA,EAAW;IACrB,MAAM+B,GAAA,GAAM;IACZ,OAAAT,EAAA,GAAAO,MAAA,oBAAAA,MAAA,CAAQG,KAAA,KAAR,QAAAV,EAAA,CAAAW,IAAA,CAAAJ,MAAA,EAAgB,qBAAqBE,GAAG,IAAI;MAAClE,MAAA;MAAQqD,eAAA;MAAiBC;IAAM,IACtE,IAAIe,SAAA,CAAUH,GAAG;EACzB;EAEA,MAAMI,MAAA,GAAyF;MAC7FC,OAAA,EAAS,EAAC;MACVC,OAAA,EAAS;IAAC;IAGNC,eAAA,GAAkB1E,gBAAA,CACtBC,MAAA,EACAqD,eAAA,EACA,CAAC;MAAC7C,UAAA;MAAYH,cAAA;MAAgB/B,UAAA;MAAYgB;IAAA,MAAW;MAGhD,YAAOP,MAAA,IAAW,aACfA,MAAA,CAAO;QAACyB,UAAA;QAAYlC,UAAA;QAAY8D,aAAA;QAAe/B,cAAA;QAAgBf;MAAM,KACrE8C,aAAA,CAAc;QAAC5B,UAAA;QAAYlC,UAAA;QAAY8D,aAAA;QAAe/B,cAAA;QAAgBf;MAAA,CAAM,OAAO,IAEnF,OAAA0E,MAAA,IACFM,MAAA,CAAOE,OAAA,CAAQvG,IAAA,CAAK;QAClB3B,IAAA,EAAMoI,oBAAA,CAAqBlE,UAAU;QACrClB,KAAA,EAAO,GAAGA,KAAA,CAAMsB,KAAA,CAAM,GAAGuC,eAAe,CAAC,GACvC7D,KAAA,CAAMF,MAAA,GAAS+D,eAAA,GAAkB,QAAQ,EAC3C;QACA/D,MAAA,EAAQE,KAAA,CAAMF;MACf,IAEIE,KAAA;MAGL0E,MAAA,IACFM,MAAA,CAAOC,OAAA,CAAQtG,IAAA,CAAK;QAClB3B,IAAA,EAAMoI,oBAAA,CAAqBlE,UAAU;QACrClB,KAAA,EAAO,GAAGA,KAAA,CAAMsB,KAAA,CAAM,GAAGuC,eAAe,CAAC,GAAG7D,KAAA,CAAMF,MAAA,GAAS+D,eAAA,GAAkB,QAAQ,EAAE;QACvF/D,MAAA,EAAQE,KAAA,CAAMF;MAAA,CACf;MAGH,MAAM;QAAC8B,OAAA;QAASC,SAAA;QAAWE;MAAQ,IAAAa,sBAAA,CACjC,OAAOoB,MAAA,CAAOnB,SAAA,IAAc,aACxBmB,MAAA,CAAOnB,SAAA,CAAU9B,cAAc,IAC/BiD,MAAA,CAAOnB,SAAA;MAEb,IAAI,CAACjB,OAAA,EAAgB,OAAA5B,KAAA;MACf;QAACiC,GAAA,EAAKR,EAAA;QAAI4D,KAAA,EAAOxE,IAAA;QAAMyE,UAAA,EAAYpD,SAAA;QAAWqD,QAAA,EAAUpD;MAAW,IAAApB,cAAA;MAElE,OAAAyE,CAAA,CACLxF,KAAA,EACA;QACEyF,MAAA,EAAQ;QACRC,IAAA,EAAMhE,aAAA,CAAc;UAClBE,OAAA;UACAC,SAAA;UACAE,IAAA;UACAN,EAAA;UACAZ,IAAA;UACA7D,IAAA,EAAMkE,UAAA;UACN,IAAI,CAAC8C,MAAA,CAAO2B,6BAAA,IAAiC;YAACxD,OAAA;YAASD;UAAS;QAAA,CACjE;MACH;MAAA;MAEA;IAEJ;EAGF,IAAIwC,MAAA,EAAQ;IACV,MAAMkB,UAAA,GAAaZ,MAAA,CAAOE,OAAA,CAAQpF,MAAA;MAC5B+F,UAAA,GAAab,MAAA,CAAOC,OAAA,CAAQnF,MAAA;IAC9B,KAAA8F,UAAA,IAAcC,UAAA,OACdzB,EAAA,IAAQM,MAAA,oBAAAA,MAAA,CAAAoB,cAAA,KAAkBpB,MAAA,CAAOqB,GAAA,KAAjC,QAAA3B,EAAA,CAAwC,mDAC1C,IAAAC,EAAA,GAAAK,MAAA,CAAOqB,GAAA,KAAP,QAAA1B,EAAA,CAAAS,IAAA,CAAAJ,MAAA,EACE,oCAAoCM,MAAA,CAAOC,OAAA,CAAQnF,MAAM,cAAckF,MAAA,CAAOE,OAAA,CAAQpF,MAAM,MAG5FkF,MAAA,CAAOC,OAAA,CAAQnF,MAAA,GAAS,OAC1BwE,EAAA,GAAQI,MAAA,oBAAAA,MAAA,CAAAqB,GAAA,KAAR,QAAAzB,EAAA,CAAAQ,IAAA,CAAAJ,MAAA,EAAc,0CACZ,IAAAH,EAAA,IAAAG,MAAA,oBAAAA,MAAA,CAAQsB,KAAA,KAAStB,MAAA,CAAOqB,GAAA,KAAxB,QAA+BxB,EAAA,CAAAS,MAAA,CAAOC,OAAA,IAEtCD,MAAA,CAAOE,OAAA,CAAQpF,MAAA,GAAS,GAAG;MACvB,MAAAoF,OAAA,sBAAc3B,GAAA;MACT;QAACvG;MAAA,KAASgI,MAAA,CAAOE,OAAA,EAClBA,OAAA,CAAAe,GAAA,CAAIjJ,IAAA,CAAKiB,OAAA,CAAQvB,YAAA,EAAc,GAAG,EAAEuB,OAAA,CAAQ,YAAY,IAAI,CAAC;MAEvE,CAAAuG,EAAA,GAAAE,MAAA,oBAAAA,MAAA,CAAQqB,GAAA,KAAR,QAAcvB,EAAA,CAAAM,IAAA,CAAAJ,MAAA,6CAA2C,CAAC,GAAGQ,OAAA,CAAQgB,MAAA,CAAQ;IAC/E;IAEI,CAAAN,UAAA,IAAcC,UAAA,OAChBpB,EAAA,GAAAC,MAAA,oBAAAA,MAAA,CAAQyB,QAAA,KAAR,QAAA1B,EAAA,CAAAK,IAAA,CAAAJ,MAAA;EAEJ;EAEO,OAAAS,eAAA;AACT;AAEA,SAASC,qBAAqBpI,IAAA,EAA0C;EAC/D,OAAAD,QAAA,CAAmB8B,oBAAA,CAAqB7B,IAAI,CAAC;AACtD","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}